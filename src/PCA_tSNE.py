import streamlit as st
import pandas as pd
import os
import plotly.express as px
import mlflow
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split

# Load d·ªØ li·ªáu MNIST
def load_mnist():
    mnist = fetch_openml('mnist_784', version=1, as_frame=False)
    X, y = mnist.data, mnist.target.astype(int)
    return X, y

# Thi·∫øt l·∫≠p MLflow
def mlflow_input():
    DAGSHUB_MLFLOW_URI = "https://dagshub.com/NewbieHocIT/MocMayvsPython.mlflow"
    st.session_state['mlflow_url'] = DAGSHUB_MLFLOW_URI
    mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)

    os.environ["MLFLOW_TRACKING_USERNAME"] = "NewbieHocIT"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "681dda9a41f9271a144aa94fa8624153a3c95696"

    mlflow.set_experiment("PCA-tSNE")  # ƒê·∫∑t t√™n th√≠ nghi·ªám l√† "PCA-tSNE"

# Gi·∫£m chi·ªÅu d·ªØ li·ªáu
def reduce_dimensions(X, method='PCA', n_components=2):
    """
    H√†m gi·∫£m chi·ªÅu d·ªØ li·ªáu s·ª≠ d·ª•ng PCA ho·∫∑c t-SNE.
    
    Parameters:
    - X: D·ªØ li·ªáu ƒë·∫ßu v√†o (numpy array).
    - method: Ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu ('PCA' ho·∫∑c 't-SNE').
    - n_components: S·ªë chi·ªÅu sau khi gi·∫£m.
    
    Returns:
    - X_reduced: D·ªØ li·ªáu sau khi gi·∫£m chi·ªÅu.
    """
    if method == 'PCA':
        reducer = PCA(n_components=n_components)
    elif method == 't-SNE':
        reducer = TSNE(n_components=n_components, perplexity=30, n_iter=300)
    else:
        raise ValueError("Ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu kh√¥ng h·ª£p l·ªá. Ch·ªçn 'PCA' ho·∫∑c 't-SNE'.")
    
    X_reduced = reducer.fit_transform(X)
    return X_reduced

# Tr·ª±c quan h√≥a d·ªØ li·ªáu
def visualize_data(X_reduced, y, n_components):
    """
    H√†m tr·ª±c quan h√≥a d·ªØ li·ªáu sau khi gi·∫£m chi·ªÅu s·ª≠ d·ª•ng plotly.
    - S·ª≠ d·ª•ng b·∫£ng m√†u phong ph√∫ h∆°n ƒë·ªÉ hi·ªÉn th·ªã c√°c ƒëi·ªÉm d·ªØ li·ªáu.
    """
    # T·∫°o DataFrame t·ª´ d·ªØ li·ªáu gi·∫£m chi·ªÅu
    df = pd.DataFrame(X_reduced, columns=[f"Component {i+1}" for i in range(n_components)])
    df['Digit'] = y  # Th√™m c·ªôt nh√£n (digit)

    # N·∫øu s·ªë chi·ªÅu > 3, cho ph√©p ng∆∞·ªùi d√πng ch·ªçn 3 chi·ªÅu ƒë·ªÉ bi·ªÉu di·ªÖn
    if n_components > 3:
        st.warning("‚ö†Ô∏è S·ªë chi·ªÅu > 3. Vui l√≤ng ch·ªçn 3 chi·ªÅu ƒë·ªÉ bi·ªÉu di·ªÖn.")
        col1, col2, col3 = st.columns(3)
        with col1:
            x_axis = st.selectbox("Ch·ªçn tr·ª•c X", df.columns[:-1], index=0)
        with col2:
            y_axis = st.selectbox("Ch·ªçn tr·ª•c Y", df.columns[:-1], index=1)
        with col3:
            z_axis = st.selectbox("Ch·ªçn tr·ª•c Z", df.columns[:-1], index=2)
    else:
        x_axis, y_axis, z_axis = df.columns[0], df.columns[1], df.columns[2] if n_components == 3 else None

    # T·∫°o bi·ªÉu ƒë·ªì 3D ho·∫∑c 2D t√πy thu·ªôc v√†o s·ªë chi·ªÅu
    if n_components >= 3:
        fig = px.scatter_3d(
            df, 
            x=x_axis, 
            y=y_axis, 
            z=z_axis, 
            color='Digit', 
            title="3D Visualization of Reduced Data",
            labels={'color': 'Digit'},
            color_continuous_scale=px.colors.sequential.Viridis  # S·ª≠ d·ª•ng b·∫£ng m√†u phong ph√∫
        )
    else:
        fig = px.scatter(
            df, 
            x=x_axis, 
            y=y_axis, 
            color='Digit', 
            title="2D Visualization of Reduced Data",
            labels={'color': 'Digit'},
            color_continuous_scale=px.colors.sequential.Viridis  # S·ª≠ d·ª•ng b·∫£ng m√†u phong ph√∫
        )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.plotly_chart(fig, use_container_width=True)

# H√†m ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng
def run_pca_tsne():
    st.title("PCA & t-SNE Visualization")

    # Thi·∫øt l·∫≠p MLflow
    mlflow_input()

    # T·∫£i d·ªØ li·ªáu MNIST
    X, y = load_mnist()

    # Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u
    num_samples = st.slider(
        "Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u ƒë·ªÉ gi·∫£m chi·ªÅu:", 
        1000, X.shape[0], 10000, 
        key="pca_tsne_num_samples_slider"
    )
    X_selected, _, y_selected, _ = train_test_split(X, y, train_size=num_samples, stratify=y, random_state=42)

    # Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu
    reduction_method = st.selectbox(
        "Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu:", 
        ["PCA", "t-SNE"], 
        key="pca_tsne_reduction_method_selectbox"
    )

    # Ch·ªçn s·ªë chi·ªÅu
    n_components = st.slider(
        "Ch·ªçn s·ªë chi·ªÅu sau khi gi·∫£m:", 
        2, 
        784 if reduction_method == "PCA" else 3,  # Gi·ªõi h·∫°n t-SNE t·ªëi ƒëa l√† 3
        2,
        key="pca_tsne_n_components_slider"
    )

    # N√∫t gi·∫£m chi·ªÅu
    if st.button("Gi·∫£m chi·ªÅu", key="pca_tsne_reduce_button"):
        # Gi·∫£m chi·ªÅu d·ªØ li·ªáu
        X_reduced = reduce_dimensions(X_selected, method=reduction_method, n_components=n_components)

        # L∆∞u k·∫øt qu·∫£ v√†o session_state ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i
        st.session_state['X_reduced'] = X_reduced
        st.session_state['y_selected'] = y_selected
        st.session_state['n_components'] = n_components

        st.success("‚úÖ ƒê√£ gi·∫£m chi·ªÅu d·ªØ li·ªáu th√†nh c√¥ng!")

    # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c gi·∫£m chi·ªÅu
    if 'X_reduced' in st.session_state:
        # Tr·ª±c quan h√≥a d·ªØ li·ªáu
        st.subheader("Tr·ª±c quan h√≥a d·ªØ li·ªáu sau khi gi·∫£m chi·ªÅu")
        visualize_data(st.session_state['X_reduced'], st.session_state['y_selected'], st.session_state['n_components'])

        # Ph·∫ßn ƒë·∫∑t t√™n run v√† logging v√†o MLflow
        st.subheader("Log v√†o MLflow")
        run_name = st.text_input(
            "üîπ Nh·∫≠p t√™n Run:", 
            "Default_Run", 
            key="pca_tsne_run_name_input"
        )

        if st.button("Log v√†o MLflow", key="pca_tsne_log_button"):
            with mlflow.start_run(run_name=run_name):
                mlflow.log_param("num_samples", num_samples)
                mlflow.log_param("reduction_method", reduction_method)
                mlflow.log_param("n_components", n_components)
                st.success(f"‚úÖ ƒê√£ log d·ªØ li·ªáu v√†o MLflow v·ªõi t√™n Run: {run_name}")

if __name__ == "__main__":
    run_pca_tsne()