import numpy as np
import pandas as pd
import streamlit as st
import mlflow
import mlflow.sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import precision_score, f1_score, recall_score
from src import processing
from datetime import datetime
import os

# Kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi DagsHub
def mlflow_input():
    DAGSHUB_MLFLOW_URI = "https://dagshub.com/NewbieHocIT/MocMayvsPython.mlflow"
    st.session_state['mlflow_url'] = DAGSHUB_MLFLOW_URI
    mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)

    os.environ["MLFLOW_TRACKING_USERNAME"] = "NewbieHocIT"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "681dda9a41f9271a144aa94fa8624153a3c95696"

    mlflow.set_experiment("Regression_Experiment")


def train_model(X_train, y_train, X_valid, y_valid, model_type='multiple', degree=2, run_name=None):
    """
    H√†m hu·∫•n luy·ªán m√¥ h√¨nh h·ªìi quy v√† log k·∫øt qu·∫£ v√†o MLflow.
    """
    with mlflow.start_run(run_name=run_name):
        if model_type == 'multiple':
            model = LinearRegression()
            poly = None
        elif model_type == 'polynomial':
            poly = PolynomialFeatures(degree=degree)
            X_train = poly.fit_transform(X_train)
            X_valid = poly.transform(X_valid)
            model = LinearRegression()
        else:
            raise ValueError("Lo·∫°i m√¥ h√¨nh kh√¥ng h·ª£p l·ªá. Ch·ªçn 'multiple' ho·∫∑c 'polynomial'.")

        # Hu·∫•n luy·ªán m√¥ h√¨nh
        model.fit(X_train, y_train)
        y_train_pred = model.predict(X_train)
        y_valid_pred = model.predict(X_valid)

        # Chuy·ªÉn ƒë·ªïi d·ª± ƒëo√°n th√†nh nh·ªã ph√¢n (0 ho·∫∑c 1)
        y_train_pred_binary = np.round(y_train_pred)
        y_valid_pred_binary = np.round(y_valid_pred)

        # T√≠nh to√°n c√°c ch·ªâ s·ªë ƒë√°nh gi√°
        train_precision = precision_score(y_train, y_train_pred_binary, average='weighted', zero_division=0)
        valid_precision = precision_score(y_valid, y_valid_pred_binary, average='weighted', zero_division=0)
        train_f1 = f1_score(y_train, y_train_pred_binary, average='weighted')
        valid_f1 = f1_score(y_valid, y_valid_pred_binary, average='weighted')
        train_recall = recall_score(y_train, y_train_pred_binary, average='weighted')
        valid_recall = recall_score(y_valid, y_valid_pred_binary, average='weighted')

        # Log c√°c tham s·ªë v√† ch·ªâ s·ªë v√†o MLflow
        mlflow.log_param("model_type", model_type)
        mlflow.log_param("degree", degree if model_type == "polynomial" else None)
        mlflow.log_metric("train_precision", train_precision)
        mlflow.log_metric("valid_precision", valid_precision)
        mlflow.log_metric("train_f1", train_f1)
        mlflow.log_metric("valid_f1", valid_f1)
        mlflow.log_metric("train_recall", train_recall)
        mlflow.log_metric("valid_recall", valid_recall)
        mlflow.sklearn.log_model(model, "model")

    return model, train_precision, valid_precision, train_f1, valid_f1, train_recall, valid_recall, poly


def display():
    st.title("M√¥ ph·ªèng H·ªìi quy v·ªõi MLflow Tracking")

    # ƒê·ªçc d·ªØ li·ªáu
    df = pd.read_csv('./data/processed_data.csv')
    df = df.iloc[:, 1:]  # B·ªè c·ªôt ƒë·∫ßu ti√™n (index)

    if df is not None:
        st.write("Xem tr∆∞·ªõc d·ªØ li·ªáu:", df.head())

        # Ch·ªçn c·ªôt m·ª•c ti√™u
        target_col = st.selectbox("Ch·ªçn c·ªôt m·ª•c ti√™u", df.columns)

        if target_col:
            # Ch·ªçn t·ª∑ l·ªá t·∫≠p Test
            test_size = st.slider("üîπ Ch·ªçn t·ª∑ l·ªá d·ªØ li·ªáu Test (%)", min_value=0, max_value=50, step=1, value=20)
            
            # Ch·ªçn t·ª∑ l·ªá t·∫≠p Validation
            val_size = st.slider("üî∏ Ch·ªçn t·ª∑ l·ªá d·ªØ li·ªáu Validation (%)", min_value=0, max_value=50, step=1, value=15)

            # T√≠nh t·ª∑ l·ªá t·∫≠p Train
            train_size = 100 - test_size - val_size

            # Ki·ªÉm tra n·∫øu t·ª∑ l·ªá kh√¥ng h·ª£p l·ªá
            if train_size <= 0:
                st.error("üö® T·ªïng Test + Validation kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100%. H√£y ch·ªçn l·∫°i.")
                st.stop()

            # Chia d·ªØ li·ªáu th√†nh Train/Test
            X = df.drop(columns=[target_col])
            y = df[target_col]
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size / 100, random_state=42)

            # Chia ti·∫øp Train th√†nh Train/Validation
            val_ratio = val_size / (train_size + val_size)  # T·ª∑ l·ªá Validation tr√™n t·ªïng Train + Validation
            X_train_final, X_val, y_train_final, y_val = train_test_split(X_train, y_train, test_size=val_ratio, random_state=42)

            # Hi·ªÉn th·ªã k√≠ch th∆∞·ªõc train/val/test
            st.subheader("üìä K√≠ch th∆∞·ªõc c√°c t·∫≠p d·ªØ li·ªáu")
            st.write(f"üìå **T·∫≠p Train:** {train_size}% ({X_train_final.shape[0]} m·∫´u)")
            st.write(f"üìå **T·∫≠p Validation:** {val_size}% ({X_val.shape[0]} m·∫´u)")
            st.write(f"üìå **T·∫≠p Test:** {test_size}% ({X_test.shape[0]} m·∫´u)")

            # Ch·ªçn lo·∫°i m√¥ h√¨nh
            model_type = st.selectbox("Ch·ªçn lo·∫°i m√¥ h√¨nh", ["multiple", "polynomial"])
            degree = st.slider("B·∫≠c c·ªßa h·ªìi quy ƒëa th·ª©c", 2, 5, 2) if model_type == "polynomial" else None

            # ƒê·∫∑t t√™n cho m√¥ h√¨nh
            model_name = st.text_input("ƒê·∫∑t t√™n cho m√¥ h√¨nh (t√πy ch·ªçn)")

            # Hu·∫•n luy·ªán m√¥ h√¨nh
            if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
                if not model_name:
                    st.error("üö® Vui l√≤ng ƒë·∫∑t t√™n cho m√¥ h√¨nh.")
                    return

                model, train_precision, valid_precision, train_f1, valid_f1, train_recall, valid_recall, poly = train_model(
                    X_train_final, y_train_final, X_val, y_val, model_type=model_type, degree=degree, run_name=model_name
                )

                # L∆∞u m√¥ h√¨nh v√†o danh s√°ch
                if 'models' not in st.session_state:
                    st.session_state.models = {}
                st.session_state.models[model_name] = {
                    "model": model,
                    "poly": poly,
                    "model_type": model_type,
                    "degree": degree
                }

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ hu·∫•n luy·ªán
                st.write("K·∫øt qu·∫£ hu·∫•n luy·ªán:")
                st.write(f"- Train Precision: {train_precision:.2f}")
                st.write(f"- Validation Precision: {valid_precision:.2f}")
                st.write(f"- Train F1 Score: {train_f1:.2f}")
                st.write(f"- Validation F1 Score: {valid_f1:.2f}")
                st.write(f"- Train Recall: {train_recall:.2f}")
                st.write(f"- Validation Recall: {valid_recall:.2f}")


import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))



def predict():
    st.subheader("üìù Nh·∫≠p th√¥ng tin d·ª± ƒëo√°n")
    
    # Ki·ªÉm tra xem c√≥ m√¥ h√¨nh n√†o ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán kh√¥ng
    if 'models' not in st.session_state or not st.session_state.models:
        st.error("üö® Vui l√≤ng hu·∫•n luy·ªán √≠t nh·∫•t m·ªôt m√¥ h√¨nh tr∆∞·ªõc khi d·ª± ƒëo√°n.")
        return

    # Ch·ªçn m√¥ h√¨nh t·ª´ danh s√°ch
    model_names = list(st.session_state.models.keys())
    selected_model_name = st.selectbox("Ch·ªçn m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán", model_names)

    # L·∫•y th√¥ng tin m√¥ h√¨nh ƒë√£ ch·ªçn
    selected_model = st.session_state.models[selected_model_name]
    model = selected_model["model"]
    poly = selected_model["poly"]
    model_type = selected_model["model_type"]
    degree = selected_model.get("degree", None)

    # Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh
    st.write("### Th√¥ng tin m√¥ h√¨nh ƒë√£ ch·ªçn:")
    st.write(f"- T√™n m√¥ h√¨nh: {selected_model_name}")
    st.write(f"- Lo·∫°i m√¥ h√¨nh: {model_type}")
    if model_type == "polynomial":
        st.write(f"- B·∫≠c ƒëa th·ª©c: {degree}")

    # T·∫°o c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
    col1, col2, col3 = st.columns(3)
    with col1:
        pclass = st.selectbox("Pclass", [1, 2, 3])
        sex = st.selectbox("Sex", ["male", "female"])
    with col2:
        age = st.slider("Age", 0, 100, 25)
        sibsp = st.slider("SibSp", 1, 4, 1)
    with col3:
        embarked = st.selectbox("Embarked", ["C", "S", "Q"])
        fare = st.number_input("Fare", min_value=0.0, max_value=600.0, value=50.0)
        parch = st.selectbox("Parch", [0, 1, 2, 3, 4, 5])

    # N√∫t d·ª± ƒëo√°n
    if st.button("D·ª± ƒëo√°n"):
        # X·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o
        sex = 1 if sex == "male" else 0
        embarked = {"C": 0, "S": 1, "Q": 2}[embarked]
        input_data = np.array([[pclass, sex, age, sibsp, embarked, fare, parch]])

        # Bi·∫øn ƒë·ªïi d·ªØ li·ªáu n·∫øu l√† m√¥ h√¨nh ƒëa th·ª©c
        if model_type == "polynomial" and poly is not None:
            input_data = poly.transform(input_data)

        prediction = model.predict(input_data)[0]
        prediction = sigmoid(prediction)  # ƒê∆∞a v·ªÅ kho·∫£ng [0, 1]

        prediction_binary = 1 if prediction >= 0.5 else 0
        confidence = round(abs(prediction - 0.5) * 200, 2)

        result = "S·ªëng" if prediction_binary == 1 else "Ch·∫øt"
        st.success(f"**D·ª± ƒëo√°n:** {result}  \nüîç **ƒê·ªô tin c·∫≠y:** {confidence}%")


def show_experiment_selector():
    st.title("üìä MLflow Experiments")

    experiment_name = "Regression_Experiment"
    
    # L·∫•y danh s√°ch experiment
    experiments = mlflow.search_experiments()
    selected_experiment = next((exp for exp in experiments if exp.name == experiment_name), None)

    if not selected_experiment:
        st.error(f"‚ùå Experiment '{experiment_name}' kh√¥ng t·ªìn t·∫°i!")
        return

    st.subheader(f"üìå Experiment: {experiment_name}")
    st.write(f"**Experiment ID:** {selected_experiment.experiment_id}")
    st.write(f"**Tr·∫°ng th√°i:** {'Active' if selected_experiment.lifecycle_stage == 'active' else 'Deleted'}")
    st.write(f"**V·ªã tr√≠ l∆∞u tr·ªØ:** {selected_experiment.artifact_location}")

    # L·∫•y danh s√°ch runs trong experiment
    runs = mlflow.search_runs(experiment_ids=[selected_experiment.experiment_id])

    if runs.empty:
        st.warning("‚ö† Kh√¥ng c√≥ runs n√†o trong experiment n√†y.")
        return

    st.write("### üèÉ‚Äç‚ôÇÔ∏è C√°c Runs g·∫ßn ƒë√¢y:")

    # T·∫°o danh s√°ch run name v√† map v·ªõi run_id
    run_dict = {}
    for _, run in runs.iterrows():
        run_name = run.get("tags.mlflow.runName", f"Run {run['run_id'][:8]}")
        run_dict[run_name] = run["run_id"]  # Map run_name -> run_id

    # Ch·ªçn run theo t√™n
    selected_run_name = st.selectbox("üîç Ch·ªçn m·ªôt run:", list(run_dict.keys()), key="runname")
    selected_run_id = run_dict[selected_run_name]

    # L·∫•y th√¥ng tin c·ªßa run ƒë√£ ch·ªçn
    selected_run = mlflow.get_run(selected_run_id)

    if selected_run:
        st.subheader(f"üìå Th√¥ng tin Run: {selected_run_name}")
        st.write(f"**Run ID:** {selected_run_id}")
        st.write(f"**Tr·∫°ng th√°i:** {selected_run.info.status}")
        
        start_time_ms = selected_run.info.start_time
        start_time = datetime.fromtimestamp(start_time_ms / 1000).strftime("%Y-%m-%d %H:%M:%S") if start_time_ms else "Kh√¥ng c√≥ th√¥ng tin"

        st.write(f"**Th·ªùi gian ch·∫°y:** {start_time}")

        params = selected_run.data.params
        metrics = selected_run.data.metrics

        if params:
            st.write("### ‚öôÔ∏è Parameters:")
            st.json(params)

        if metrics:
            st.write("### üìä Metrics:")
            st.json(metrics)

    else:
        st.warning("‚ö† Kh√¥ng t√¨m th·∫•y th√¥ng tin cho run n√†y.")


def LinearRegressionApp():
    st.title("üñäÔ∏è Linear Regression App")

    tab1, tab2, tab3, tab4 = st.tabs(["üìò Processing ", "‚öôÔ∏è Hu·∫•n luy·ªán", "üî¢ D·ª± ƒëo√°n", "üî•Mlflow"])

    with tab1:
        processing.display()
    with tab2:
        display()
    with tab3:
        predict()  # G·ªçi h√†m d·ª± ƒëo√°n
    with tab4:
        show_experiment_selector()


def LinearApp():
    mlflow_input()
    LinearRegressionApp()


if __name__ == "__main__":
    mlflow_input()
    LinearRegressionApp()