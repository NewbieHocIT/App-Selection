# data_processing.py
import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

def display():
    if "model" not in st.session_state:
        st.session_state.model = None
    st.subheader("üìÇ T·∫£i d·ªØ li·ªáu l√™n")
    uploaded_file = st.file_uploader("Ch·ªçn file CSV", type=["csv"], key="file_upload")

    # Kh·ªüi t·∫°o session_state n·∫øu ch∆∞a c√≥
    if "df" not in st.session_state:
        st.session_state.df = None
    if "show_drop_step" not in st.session_state:
        st.session_state.show_drop_step = False
    if "show_missing_step" not in st.session_state:
        st.session_state.show_missing_step = False
    if "show_encode_step" not in st.session_state:
        st.session_state.show_encode_step = False
    if "show_scale_step" not in st.session_state:
        st.session_state.show_scale_step = False

    # ƒê·ªçc d·ªØ li·ªáu n·∫øu c√≥ file ƒë∆∞·ª£c t·∫£i l√™n
    if uploaded_file is not None and st.session_state.df is None:
        st.session_state.df = pd.read_csv(uploaded_file)

    if st.session_state.df is None:
        st.warning("üö® Vui l√≤ng t·∫£i l√™n m·ªôt file CSV.")
        st.stop()

    df = st.session_state.df.copy()
    st.write("### D·ªØ li·ªáu ban ƒë·∫ßu")
    st.write(df.head())

    # **B∆∞·ªõc 1: Lo·∫°i b·ªè c·ªôt**
    st.write("### 1Ô∏è‚É£ Lo·∫°i b·ªè c·ªôt kh√¥ng c·∫ßn thi·∫øt")
    drop_cols = st.multiselect("Ch·ªçn c·ªôt mu·ªën lo·∫°i b·ªè", df.columns.tolist(), key="drop_cols")
    
    if st.button("X√≥a c·ªôt ƒë√£ ch·ªçn"):
        df.drop(columns=drop_cols, inplace=True)
        st.session_state.df = df.copy()
        st.session_state.show_drop_step = True  # Hi·ªÉn th·ªã b∆∞·ªõc n√†y

    if st.session_state.show_drop_step:
        st.write("### üîÑ D·ªØ li·ªáu sau khi x√≥a c·ªôt:")
        st.write(st.session_state.df.head())

    # **B∆∞·ªõc 2: X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu**
    st.write("### 2Ô∏è‚É£ X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu")
    missing_cols = [col for col in df.columns if df[col].isna().sum() > 0]
    
    # Hi·ªÉn th·ªã th√¥ng tin c√°c c·ªôt thi·∫øu
    if missing_cols:
        st.write("### üîç Th√¥ng tin c√°c c·ªôt thi·∫øu:")
        missing_info = pd.DataFrame({
            "C·ªôt": missing_cols,
            "S·ªë l∆∞·ª£ng gi√° tr·ªã thi·∫øu": [df[col].isna().sum() for col in missing_cols],
            "Ki·ªÉu d·ªØ li·ªáu": [str(df[col].dtype) for col in missing_cols]
        })
        st.write(missing_info)
    else:
        st.write("üéâ Kh√¥ng c√≥ c·ªôt n√†o b·ªã thi·∫øu d·ªØ li·ªáu!")

    selected_col = st.selectbox("Ch·ªçn c·ªôt c√≥ d·ªØ li·ªáu thi·∫øu", [None] + missing_cols)

    if selected_col:
        dtype = str(df[selected_col].dtype)
        if dtype in ["int64", "float64"]:
            method = st.radio("Ch·ªçn ph∆∞∆°ng ph√°p", ["Mean", "Median", "Gi√° tr·ªã c·ª• th·ªÉ"])
        else:
            method = st.radio("Ch·ªçn ph∆∞∆°ng ph√°p", ["Mode", "Gi√° tr·ªã c·ª• th·ªÉ"])

        value = None
        if method == "Gi√° tr·ªã c·ª• th·ªÉ":
            value = st.text_input("Nh·∫≠p gi√° tr·ªã thay th·∫ø")

        if st.button("X·ª≠ l√Ω thi·∫øu d·ªØ li·ªáu"):
            if method == "Mean":
                st.session_state.df[selected_col].fillna(df[selected_col].mean(), inplace=True)
            elif method == "Median":
                st.session_state.df[selected_col].fillna(df[selected_col].median(), inplace=True)
            elif method == "Mode":
                st.session_state.df[selected_col].fillna(df[selected_col].mode()[0], inplace=True)
            elif method == "Gi√° tr·ªã c·ª• th·ªÉ":
                st.session_state.df[selected_col].fillna(value, inplace=True)
            st.session_state.show_missing_step = True  # Hi·ªÉn th·ªã b∆∞·ªõc n√†y

    if st.session_state.show_missing_step:
        st.write("### üîÑ D·ªØ li·ªáu sau khi x·ª≠ l√Ω thi·∫øu:")
        st.write(st.session_state.df.head())

    # **B∆∞·ªõc 3: M√£ h√≥a d·ªØ li·ªáu**
    st.write("### 3Ô∏è‚É£ Thay ƒë·ªïi ki·ªÉu d·ªØ li·ªáu")
    encoding_cols = df.select_dtypes(include=['object']).columns.tolist()
    selected_col = st.selectbox("Ch·ªçn c·ªôt ƒë·ªÉ Thay ƒë·ªïi ki·ªÉu d·ªØ li·ªáu", [None] + encoding_cols, key="encoding_col")

    if selected_col:
        unique_values = df[selected_col].unique()  # L·∫•y gi√° tr·ªã duy nh·∫•t
        mapping_dict = {}

        st.write(f"üîπ Nh·∫≠p gi√° tr·ªã thay th·∫ø cho c√°c gi√° tr·ªã trong c·ªôt `{selected_col}`:")
        for val in unique_values:
            new_val = st.text_input(f"{val} ‚Üí", key=f"encode_{selected_col}_{val}")
            if new_val:
                mapping_dict[val] = new_val  # L∆∞u gi√° tr·ªã m·ªõi

        if st.button("M√£ h√≥a c·ªôt"):
            if mapping_dict:
                st.session_state.df[selected_col] = st.session_state.df[selected_col].map(mapping_dict).astype(float)
                st.session_state.show_encode_step = True  # Hi·ªÉn th·ªã b∆∞·ªõc n√†y
            else:
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p gi√° tr·ªã thay th·∫ø tr∆∞·ªõc khi m√£ h√≥a.")

    if st.session_state.show_encode_step:
        st.write(f"### üîÑ D·ªØ li·ªáu sau khi m√£ h√≥a: `{selected_col}`")
        st.write(st.session_state.df.head())

    # **B∆∞·ªõc 4: Chu·∫©n h√≥a d·ªØ li·ªáu**
    st.write("### 4Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu")
    if st.button("Chu·∫©n h√≥a to√†n b·ªô d·ªØ li·ªáu"):
        numerical_cols = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
        scaler = StandardScaler()
        st.session_state.df[numerical_cols] = scaler.fit_transform(df[numerical_cols])
        st.session_state.show_scale_step = True  # Hi·ªÉn th·ªã b∆∞·ªõc n√†y

    if st.session_state.show_scale_step:
        st.write("### üîÑ D·ªØ li·ªáu sau khi chu·∫©n h√≥a:")
        st.write(st.session_state.df.head())

    # ========================== 3. CHIA D·ªÆ LI·ªÜU TRAIN/TEST/VAL ==========================
    st.subheader("üìä Chia d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán")
    target_col = st.selectbox("Ch·ªçn c·ªôt m·ª•c ti√™u (Label)", [None] + df.columns.tolist(), key="target_col")
    
    if target_col:
        col1, col2 = st.columns(2)

        with col1:
            test_size = st.slider("üîπ Ch·ªçn t·ª∑ l·ªá d·ªØ li·ªáu Test (%)", min_value=0, max_value=50, step=1, value=20, key="test_size")
        with col2:
            val_size = st.slider("üî∏ Ch·ªçn t·ª∑ l·ªá d·ªØ li·ªáu Validation (%)", min_value=0, max_value=50, step=1, value=15, key="val_size")

        # T√≠nh t·ª∑ l·ªá Train
        train_size = 100 - test_size - val_size

        # Ki·ªÉm tra n·∫øu t·ªïng Test + Validation v∆∞·ª£t qu√° 100%
        if train_size <= 0:
            st.error("üö® T·ªïng Test + Validation kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100%. H√£y ch·ªçn l·∫°i.")
            st.stop()

        # Chia t·∫≠p Train/Test
        X = df.drop(columns=[target_col])
        y = df[target_col]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size / 100, random_state=42)

        # Chia ti·∫øp t·∫≠p Train th√†nh Train/Validation
        val_ratio = val_size / (train_size + val_size)  # T·ª∑ l·ªá Validation tr√™n t·ªïng Train + Validation
        X_train_final, X_val, y_train_final, y_val = train_test_split(X_train, y_train, test_size=val_ratio, random_state=42)

        # Hi·ªÉn th·ªã k√≠ch th∆∞·ªõc Train/Validation/Test
        st.subheader("üìä K√≠ch th∆∞·ªõc c√°c t·∫≠p d·ªØ li·ªáu")
        st.write(f"üìå **T·∫≠p Train:** {train_size}% ({X_train_final.shape[0]} m·∫´u)")
        st.write(f"üìå **T·∫≠p Validation:** {val_size}% ({X_val.shape[0]} m·∫´u)")
        st.write(f"üìå **T·∫≠p Test:** {test_size}% ({X_test.shape[0]} m·∫´u)")

        # Hi·ªÉn th·ªã d·ªØ li·ªáu c√°c t·∫≠p
        with st.expander("üìÇ Xem d·ªØ li·ªáu Train"):
            st.write(X_train_final.head())
        with st.expander("üìÇ Xem d·ªØ li·ªáu Validation"):
            st.write(X_val.head())
        with st.expander("üìÇ Xem d·ªØ li·ªáu Test"):
            st.write(X_test.head())

        # L∆∞u v√†o session_state ƒë·ªÉ s·ª≠ d·ª•ng ti·∫øp
        st.session_state.X_train_final = X_train_final
        st.session_state.X_val = X_val
        st.session_state.y_train_final = y_train_final
        st.session_state.y_val = y_val
        st.session_state.X_test = X_test
        st.session_state.y_test = y_test

        # N√∫t download d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√† chia
        st.subheader("üì• Download d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√† chia")
        if st.button("T·∫£i xu·ªëng d·ªØ li·ªáu Train"):
            st.download_button(
                label="Download Train CSV",
                data=X_train_final.to_csv(index=False).encode('utf-8'),
                file_name="train_data.csv",
                mime="text/csv"
            )
        if st.button("T·∫£i xu·ªëng d·ªØ li·ªáu Validation"):
            st.download_button(
                label="Download Validation CSV",
                data=X_val.to_csv(index=False).encode('utf-8'),
                file_name="validation_data.csv",
                mime="text/csv"
            )
        if st.button("T·∫£i xu·ªëng d·ªØ li·ªáu Test"):
            st.download_button(
                label="Download Test CSV",
                data=X_test.to_csv(index=False).encode('utf-8'),
                file_name="test_data.csv",
                mime="text/csv"
            )